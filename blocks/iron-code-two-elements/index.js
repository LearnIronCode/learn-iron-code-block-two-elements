( function( wp ) {
	/**
	 * Registers a new block provided a unique name and an object defining its behavior.
	 * @see https://github.com/WordPress/gutenberg/tree/master/blocks#api
	 */
	var registerBlockType = wp.blocks.registerBlockType;
	/**
	 * Returns a new element of given type. Element is an abstraction layer atop React.
	 * @see https://github.com/WordPress/gutenberg/tree/master/element#element
	 *
	 * TextControl Renders a text input field.
	 * @see https://github.com/WordPress/gutenberg/blob/master/components/text-control
	 */
	var el        = wp.element.createElement,
		TextControl = wp.components.TextControl;
	/**
	 * Retrieves the translation of text.
	 * @see https://github.com/WordPress/gutenberg/tree/master/i18n#api
	 */
	var __ = wp.i18n.__;

	/**
	 * Every block starts by registering a new block type definition.
	 * @see https://wordpress.org/gutenberg/handbook/block-api/
	 */
	registerBlockType( 'learn-iron-code-block-two-elements/iron-code-two-elements', {
		/**
		 * This is the display title for your block, which can be translated with `i18n` functions.
		 * The block inserter will show this name.
		 */
		title: __( 'Iron Code Two Elements' ),

		/**
		 * Add dashicon icon in Gutenberg block selector.
		 * @see https://developer.wordpress.org/resource/dashicons/#welcome-learn-more
		 */
		icon: 'welcome-learn-more',

		/**
		 * Blocks are grouped into categories to help users browse and discover them.
		 * The categories provided by core are `common`, `embed`, `formatting`, `layout` and `widgets`.
		 */
		category: 'widgets',

		/**
		 * Optional block extended support features.
		 */
		supports: {
			// Removes support for an HTML mode.
			html: false,
		},

		/**
		 * The edit function describes the structure of your block in the context of the editor.
		 * This represents what the editor will render when the block is used.
		 * @see https://wordpress.org/gutenberg/handbook/block-edit-save/#edit
		 *
		 * @param {Object} [props] Properties passed from the editor.
		 * @return {Element}       Element to render.
		 */
		edit: function( props ) {

			/**
			 * Function to update "heading" attribute.
			 */
			function onChangeHeading( newHeading ) {
				props.setAttributes( { heading: newHeading } );
			}

			/**
			 * Render our block for the editor using our heading attribute.
			 *
			 * Additionally, assign an onChange function for updating the heading attribute.
			 *
			 * Note we are calling el() twice. The third parameter of el()
			 * defines the markup inside the tag, which can be
			 * another element generated by el(), like in this case.
			 *
			 * Our rendered block will be:
			 * <div class="wp-block-learn-iron-code-block-two-elements-iron-code-two-elements">
			 *   <h2>User Entered Heading Value Here</h2>
			 * </div>
			 */
			return el(
				'div',
				{
					className: props.className
				},
				// Inside our <div> tag we make another el() call.
				el(
					TextControl,
					{
						className: 'learn-iron-code-block-two-elements--heading',
						onChange: onChangeHeading,
						placeHolder: __('Put your heading here'),
						value: props.attributes.heading
					}
				)
			);
		},

		/**
		 * The save function defines the way in which the different attributes should be combined
		 * into the final markup, which is then serialized by Gutenberg into `post_content`.
		 * @see https://wordpress.org/gutenberg/handbook/block-edit-save/#save
		 *
		 * @param {Object} [props] Properties passed from the editor.
		 * @return {Element}       Element to render.
		 */
		save: function( props ) {
			/**
			 * Render our block for saving in the database in our content.
			 *
			 * Once again we are nesting one element (h2) inside another
			 * element (div).
			 *
			 * Note: Our className is automatically added to our top-level element.
			 */
			return el(
				'div',
				{},
				// Inside our <div> tag we make another el() call.
				el(
					'h2',
					{
						className: 'learn-iron-code-block-two-elements--heading',
					},
					// Inside our <h2> tag, we use the value of the attribute heading.
					props.attributes.heading
				)
			);
		}
	} );
} )(
	window.wp
);
